lib.gridelements {
	defaultGridSetup {
		innerWrap < tt_content.stdWrap.innerWrap
		innerWrap.cObject.default.20.40 = TEXT
		innerWrap.cObject.default.20.40 {
			dataWrap = {field:tx_themes_responsive},{field:tx_themes_behaviour},{field:tx_themes_variants},{field:tx_themes_columnsettings},{field:tx_themes_enforceequalcolumnheight}
			postUserFunc = KayStrobach\Themes\Frontend\CssClassMapper->mapGenericToFramework
			postUserFunc {
				responsiveMapping =< lib.content.cssMap.responsive
				behaviourMapping =< lib.content.cssMap.behaviour
				responsiveRowMapping =< lib.content.cssMap.responsive.row
				responsiveColumnMapping =< lib.content.cssMap.responsive.column
				variantMapping =< lib.content.cssMap.variants
			}
		}
	}
}

lib.defaultColumnStdWrap {
	innerWrap < tt_content.stdWrap.innerWrap
	innerWrap.cObject.default.20.40 = TEXT
	innerWrap.cObject.default.20.40 {
		dataWrap = {field:tx_themes_responsive},{field:tx_themes_behaviour},{field:tx_themes_variants},{field:tx_themes_columnsettings},{field:tx_themes_enforceequalcolumnheight}
		postUserFunc = KayStrobach\Themes\Frontend\CssClassMapper->mapGenericToFramework
		postUserFunc {
			responsiveMapping =< lib.content.cssMap.responsive
			behaviourMapping =< lib.content.cssMap.behaviour
			responsiveColumnMapping =< lib.content.cssMap.responsive.column
		}
	}
}

lib.containerBackgroundImage = COA
lib.containerBackgroundImage {
	wrap = <style>|</style>
	if.isTrue.field = media
	10 = COA
	10 {
		10 = FILES
		10 {
			references {
				table = tt_content
				fieldName = media
				uid.field = uid
			}
			maxItems = 1
			renderObj = COA
			renderObj {
				10 = IMG_RESOURCE
				10 {
					file.import.data = file:current:publicUrl
					file.width = 768m
					stdWrap.stdWrap.dataWrap = background:url({TSFE:lastImgResourceInfo|3}) no-repeat center center; background-size:cover; filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src='{TSFE:lastImgResourceInfo|3}',sizingMethod='scale'); -ms-filter: 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="{TSFE:lastImgResourceInfo|3}", sizingMethod="scale")';
					stdWrap.wrap = { | }
					stdWrap.wrap.dataWrap = #c{field:uid} |
				}
				20 < .10
				20 {
					file.width = 992m
					stdWrap.noTrimWrap = | @media (min-width: 768px) {|}|
				}
				30 < .10
				30 {
					file.width = 1200m
					stdWrap.noTrimWrap = | @media (min-width: 992px) {|}|
				}
				40 < .10
				40 {
					file.width = 1920m
					stdWrap.noTrimWrap = | @media (min-width: 1200px) {|}|
				}
			}
		}
	}
}


<INCLUDE_TYPOSCRIPT: source="DIR:EXT:themes_gridelements/Configuration/Elements/TypoScript" extensions="typoscript">
<INCLUDE_TYPOSCRIPT: source="DIR:EXT:themes_gridelements/Configuration/TypoScript/Library" extensions="typoscript">

tt_content.stdWrap.innerWrap {
	cObject {
		if {
			value = gridelements_pi1
			equals.field = CType
			negate = 1
		}
		default.20.40 = TEXT
		default.20.40 {
			dataWrap = {field:tx_themes_responsive},{field:tx_themes_behaviour},{field:tx_themes_variants}
			postUserFunc = KayStrobach\Themes\Frontend\CssClassMapper->mapGenericToFramework
			postUserFunc {
				responsiveMapping =< lib.content.cssMap.responsive
				behaviourMapping =< lib.content.cssMap.behaviour
				variantMapping =< lib.content.cssMap.variants
			}
		}
	}
}
